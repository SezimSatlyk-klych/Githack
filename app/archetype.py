from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import os
import requests
import json
import re
from threading import Lock
from datetime import datetime

router = APIRouter()

# === ARCHETYPE CONFIG ===
ARCHETYPES = [
    {"archetype": "–ì–µ–Ω–µ—Ä–∞–ª-–ó–∞–π–∫–∞", "mentor_name": "–î–∏–∞–Ω–∞", "emoji": "üî•"},
    {"archetype": "–£—é—Ç–Ω—ã–π –†–µ–∑–µ—Ä–≤", "mentor_name": "–ë–µ—Ä–Ω–∞—Ä", "emoji": "üå§"},
    {"archetype": "–°–ø–æ–∫–æ–π–Ω—ã–π –°—Ç—ë–±", "mentor_name": "–ê–±–∞–π", "emoji": "üåä"},
    {"archetype": "–ó–∞—Ä—è–¥ –•–∞–æ—Å–∞", "mentor_name": "–ë–∞—Ö—Ä–µ–¥–∏–Ω", "emoji": "‚ö°Ô∏è"},
]

current_index = 0
user_id_counter = 0  # –ü—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ID
lock = Lock()

# === COMPETITION STATE ===
user_assignments = {}  # {user_id: {"name": str, "archetype": str, "mentor_name": str, "emoji": str, "assigned_at": datetime}}
competition_winner = None  # {"user_id": str, "name": str, "mentor_name": str, "completed_at": datetime}
competition_lock = Lock()

# === MODELS ===

class UserDescription(BaseModel):
    name: str
    description: str

class ArchetypeResult(BaseModel):
    name: str
    archetype: str
    mentor_name: str
    emoji: str
    comment: str
    user_id: int  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ int

class CompletionRequest(BaseModel):
    user_id: int  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ int

class CompletionResult(BaseModel):
    success: bool
    message: str
    winner_name: str = None
    winner_mentor: str = None
    user_id: int = None  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ int

# === ENV CONFIG ===

AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_KEY = os.getenv("AZURE_OPENAI_KEY")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT")
AZURE_OPENAI_API_VERSION = os.getenv("AZURE_OPENAI_API_VERSION")

# === ENDPOINTS ===

@router.post("/assign-archetypes", response_model=ArchetypeResult)
def assign_archetypes(user: UserDescription):
    global current_index, user_id_counter
    
    with lock:
        chosen = ARCHETYPES[current_index % len(ARCHETYPES)]
        current_index += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ID
        user_id_counter += 1
        user_id = user_id_counter
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    comment_prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{user.description}\n\n"
        f"–û–Ω –±—ã–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –∫–ª–∞–Ω '{chosen['archetype']}' –ø–æ–¥ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ {chosen['mentor_name']} ({chosen['emoji']}). "
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, —Ç—ë–ø–ª—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ —ç—Ç–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –ª–∏—á–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞."
    )
    
    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Ö–∞–∫–∞—Ç–æ–Ω–∞. –ü–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞."},
        {"role": "user", "content": comment_prompt}
    ]
    
    url = f"{AZURE_OPENAI_ENDPOINT}openai/deployments/{AZURE_OPENAI_DEPLOYMENT}/chat/completions?api-version={AZURE_OPENAI_API_VERSION}"
    headers = {
        "Content-Type": "application/json",
        "api-key": AZURE_OPENAI_KEY
    }
    
    data = {
        "messages": messages,
        "temperature": 0.5,
        "max_tokens": 150
    }
    
    response = requests.post(url, headers=headers, json=data)
    if response.status_code != 200:
        raise HTTPException(status_code=response.status_code, detail=response.text)
    
    try:
        content = response.json()["choices"][0]["message"]["content"].strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        with competition_lock:
            user_assignments[user_id] = {
                "name": user.name,
                "archetype": chosen["archetype"],
                "mentor_name": chosen["mentor_name"],
                "emoji": chosen["emoji"],
                "assigned_at": datetime.now()
            }
        
        return {
            "name": user.name,
            "archetype": chosen["archetype"],
            "mentor_name": chosen["mentor_name"],
            "emoji": chosen["emoji"],
            "comment": content,
            "user_id": user_id
        }
    
    except (KeyError, IndexError, json.JSONDecodeError, ValueError) as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ OpenAI: {str(e)}")

@router.post("/complete", response_model=CompletionResult)
def complete_competition(completion: CompletionRequest):
    global competition_winner
    
    with competition_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
        if completion.user_id not in user_assignments:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        if competition_winner is not None:
            user_info = user_assignments[completion.user_id]
            return CompletionResult(
                success=False,
                message=f"–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {competition_winner['name']} ({competition_winner['mentor_name']})",
                winner_name=competition_winner['name'],
                winner_mentor=competition_winner['mentor_name'],
                user_id=completion.user_id
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        user_info = user_assignments[completion.user_id]
        competition_winner = {
            "user_id": completion.user_id,
            "name": user_info["name"],
            "mentor_name": user_info["mentor_name"],
            "completed_at": datetime.now()
        }
        
        return CompletionResult(
            success=True,
            message=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {user_info['name']} –ø–µ—Ä–≤—ã–º –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ!",
            winner_name=user_info["name"],
            winner_mentor=user_info["mentor_name"],
            user_id=completion.user_id
        )

@router.get("/competition-status")
def get_competition_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""
    with competition_lock:
        if competition_winner is None:
            return {
                "status": "ongoing",
                "participants_count": len(user_assignments),
                "winner": None
            }
        else:
            return {
                "status": "completed",
                "participants_count": len(user_assignments),
                "winner": {
                    "name": competition_winner["name"],
                    "mentor_name": competition_winner["mentor_name"],
                    "completed_at": competition_winner["completed_at"].isoformat()
                }
            }

@router.post("/reset-competition")
def reset_competition():
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    global competition_winner, user_assignments, user_id_counter
    
    with competition_lock:
        competition_winner = None
        user_assignments.clear()
        user_id_counter = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ ID
    
    return {"message": "–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ"}