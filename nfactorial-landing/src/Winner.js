import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './Winner.css';

// –ë–∞–∑–æ–≤—ã–π URL API —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
const API_BASE_URL = 'http://20.83.171.131:8000';


const Winner = () => {
  const [winnerInfo, setWinnerInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [debug, setDebug] = useState(null);
  const [resetting, setResetting] = useState(false);
  const [resetSuccess, setResetSuccess] = useState(false);
  const [resetError, setResetError] = useState(null);

  useEffect(() => {
    const fetchWinnerInfo = async () => {
      try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è");
        const response = await fetch(`${API_BASE_URL}/competition-status`);
        const data = await response.json();
        
        console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", data);
        setDebug(JSON.stringify(data, null, 2));
        
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ');
        }
        
        if (data.status === "ongoing") {
          // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –µ—â–µ –∏–¥–µ—Ç
          setWinnerInfo(data);
          setLoading(false);
          return;
        }
        
        if (!data.winner || !data.winner.mentor_name) {
          throw new Error('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }
        
        setWinnerInfo(data);
        setLoading(false);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
        setError(err.message);
        setLoading(false);
      }
    };

    fetchWinnerInfo();
  }, [resetSuccess]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  const handleResetCompetition = async () => {
    setResetting(true);
    setResetSuccess(false);
    setResetError(null);
    
    try {
      const response = await fetch(`${API_BASE_URL}/reset-competition`, {
        method: 'POST',
      });
      
      const data = await response.json();
      
      if (response.ok) {
        console.log("–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ:", data);
        setResetSuccess(true);
      } else {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:", data);
        setResetError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ: " + JSON.stringify(data));
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:", err);
      setResetError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + err.message);
    } finally {
      setResetting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞ –º–µ–Ω—Ç–æ—Ä–∞
  const getMentorDetails = (mentorName) => {
    console.log("–ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞:", mentorName);
    
    const mentorMap = {
      '–î–∏–∞–Ω–∞': { emoji: 'üî•', color: '#a259e6' },
      '–ë–µ—Ä–Ω–∞—Ä': { emoji: 'üå§', color: '#ffb357' },
      '–ë–∞—Ö—Ä–µ–¥–∏–Ω': { emoji: '‚ö°Ô∏è', color: '#4a90e2' },
      '–ê–±–∞–π': { emoji: 'üåä', color: '#3ec28f' }
    };

    const details = mentorMap[mentorName] || { emoji: 'üèÜ', color: 'gold' };
    console.log("–î–µ—Ç–∞–ª–∏ –º–µ–Ω—Ç–æ—Ä–∞:", details);
    return details;
  };

  if (loading) {
    return (
      <div className="winner-container loading">
        <h1>–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...</h1>
        <div className="loader"></div>
      </div>
    );
  }

  if (error || !winnerInfo) {
    return (
      <div className="winner-container error">
        <h1>–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</h1>
        <p>{error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ'}</p>
        {debug && (
          <div className="debug-info">
            <h3>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
            <pre>{debug}</pre>
          </div>
        )}
        <div className="buttons">
          <Link to="/" className="back-home-btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
          <button 
            className="refresh-btn" 
            onClick={() => window.location.reload()}
          >
            –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </button>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
  if (winnerInfo.status === "ongoing") {
    return (
      <div className="winner-container ongoing">
        <h1>–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h1>
        <p>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å–µ –µ—â–µ —Å—Ä–∞–∂–∞—é—Ç—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.</p>
        <div className="stats">
          <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {winnerInfo.participants_count}</p>
        </div>
        <div className="buttons">
          <Link to="/" className="back-home-btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
          <button 
            className="reset-btn"
            onClick={handleResetCompetition}
            disabled={resetting}
          >
            {resetting ? '–°–±—Ä–æ—Å...' : '–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ'}
          </button>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
  const mentorName = winnerInfo.winner.mentor_name;
  const mentorDetails = getMentorDetails(mentorName);

  return (
    <div className="winner-container completed">
      <div className="confetti"></div>
      
      <div className="winner-announcement" style={{ borderColor: mentorDetails.color }}>
        <div className="winner-emoji">{mentorDetails.emoji}</div>
        <h1>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!</h1>
        <h2>–ö–ª–∞–Ω –º–µ–Ω—Ç–æ—Ä–∞ <span style={{ color: mentorDetails.color }}>{mentorName}</span> –≤—ã–∏–≥—Ä–∞–ª!</h2>
        
        <div className="winner-details">
          <p>–ü–µ—Ä–≤—ã–º –∫ —Ñ–∏–Ω–∏—à—É –ø—Ä–∏—à–µ–ª: <strong>{winnerInfo.winner.name}</strong></p>
          <p>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {new Date(winnerInfo.winner.completed_at).toLocaleString()}</p>
          <p>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {winnerInfo.participants_count}</p>
        </div>
        
        <div className="celebration-message">
          "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—Ç–æ—Ä–∞ {mentorName}! 
          –í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–ª–∏ –≤–∞—Å –∫ –ø–æ–±–µ–¥–µ!"
        </div>
        
        {debug && (
          <div className="debug-info">
            <details>
              <summary>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
              <pre>{debug}</pre>
            </details>
          </div>
        )}
        
        {resetSuccess && (
          <div className="reset-success">
            –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.
          </div>
        )}
        
        {resetError && (
          <div className="reset-error">
            {resetError}
          </div>
        )}
      </div>
      
      <div className="admin-panel">
        <h3>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
        <div className="buttons">
          <Link to="/" className="back-home-btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
          <button 
            className="refresh-btn" 
            onClick={() => window.location.reload()}
          >
            –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </button>
          <button 
            className="reset-btn"
            onClick={handleResetCompetition}
            disabled={resetting}
          >
            {resetting ? '–°–±—Ä–æ—Å...' : '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Winner; 